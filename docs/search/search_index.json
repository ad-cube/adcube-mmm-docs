{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"adcube-mmm-sdk","text":""},{"location":"client/","title":"Client","text":""},{"location":"client/#mmmclient","title":"MMMClient","text":"<pre><code>MMMClient()\n</code></pre> <p>Client implementation for interacting with AD cube's Marketing Mix Model APIs</p> <p>Methods:</p>"},{"location":"client/#load_data","title":".load_data","text":"<pre><code>.load_data(\n   experiment_name: str, dataset: pd.DataFrame, platforms: List[str],\n   awareness: List[bool], impression_kpi: str, target_kpi: str,\n   offline_platforms: List[str], extra_features: List[str], use_data_quality: bool\n)\n</code></pre> <p>Loads the dataset and all the variables needed for executing the Marketing Mix Model.</p>"},{"location":"client/#parameters","title":"Parameters","text":"<p>experiment_name Name of the experiment. Needed to save the results</p> <p>dataset     DataFrame containing the data for the Marketing Mix Model.     The index must be in the form Year-Week; moreover it must     contain the cost, impressions and conversions columns for     each platform specified in <code>platforms</code> platforms     List of advertising platform names, for example:     ['Google paid search', 'TikTok', 'Google search']. They must     be substring of the cost, impressions and conversions     columns' names, for example 'Cost_TikTok'. awareness     List of boolean representing whether the corresponding     platform in <code>platforms</code> is an awareness platform, for     example: [False, True, False] impression_kpi     Prefix of the impressions columns, for example 'impressions'     means that the columns containing impressions are names as     'impressions_' where PLATFORM NAME is one of     <code>platforms</code> target_kpi     Complete name of the target KPI column, for example     'Total conversions'. Analogously to impression_kpi, it is     also the prefix of the target KPI columns for each platform offline_platforms     'radio'] extra_features     'promotions'] use_data_quality     Boolean representing whether the user provided a     <code>data_quality</code> column in <code>dataset</code>"},{"location":"client/#returns","title":"Returns","text":"<p>data_id     Id of the Marketing Mix Model data saved in DB</p>"},{"location":"client/#raises","title":"Raises","text":"<p>MalformedDatasetException     If the dataset does not follow the correct schema</p>"},{"location":"client/#fit","title":".fit","text":"<pre><code>.fit(\n   data_id: str, experiment_name: str\n)\n</code></pre> <p>Fits the AI model using the data previously loaded. This method must be called before the 'optimize_data'.</p>"},{"location":"client/#parameters_1","title":"Parameters","text":"<p>experiment_name Name of the experiment. Needed to save the results</p> <p>data_id     Id of the Marketing Mix Model data saved in DB, returned     from load_data(). It is needed to load the model's data</p>"},{"location":"client/#returns_1","title":"Returns","text":"<p>model_id     ID of the fitted AI model saved in DB</p>"},{"location":"client/#optimize","title":".optimize","text":"<pre><code>.optimize(\n   date_range: Tuple[str, str], trgt_mult: float, model_id: str, data_id: str,\n   experiment_name: str\n)\n</code></pre> <p>Run this method in order to obtain the optimal budget for all weeks and all platforms in the weeks specified in <code>date_range</code>. Specify <code>date_range</code> as a tuple of strings (start, end) with the format 'YYYY-WW'. These values specify for which weeks the user wants to optimize the budget. The year value is used to determine which past data use as reference for the budget allocation. The <code>trgt_mult</code> parameter specifies the budget multiplier, so a value of '1.2' will optimize the 120% of the past budget allocation. <code>model_id</code> and <code>data_id</code> are the ids of the AI model and the data respectively.</p> <p>For example, if the user wants to optimize the budget for the last quarter of the year, using (as a reference) the same budget of 2022, then: - <code>data_range</code> = ['2022-40', '2022-52'] - <code>trgt_mult</code> = 1.</p>"},{"location":"client/#parameters_2","title":"Parameters","text":"<p>experiment_name Name of the experiment. Needed to save the results</p> <pre><code>the selected period.\na reliable forecasting.\n</code></pre> <p>model_id     Id of the model obtained when running the fit() method. It     is needed to load the fitted models data_id     Id of the data obtained when running the load_data() method.     It is needed to load the model's data</p>"},{"location":"client/#create_plots","title":".create_plots","text":"<pre><code>.create_plots(\n   product_name: str, company_name: str, model_id: str, data_id: str,\n   opt_results_id: str\n)\n</code></pre> <p>Creates some interesting plots containing the Marketing Mix Model optimization results</p>"},{"location":"client/#parameters_3","title":"Parameters","text":"<p>product_name Name of the product</p> <p>company_name     Name of the company model_id     Id of the fitted model data_id     Id of the data to use opt_results_id     Id of the optimization results</p>"},{"location":"client/#returns_2","title":"Returns","text":"<p>plots     A zip file containing plots</p>"},{"location":"client/#create_excel","title":".create_excel","text":"<pre><code>.create_excel(\n   excel_name: str, model_id: str, data_id: str, opt_results_id: str\n)\n</code></pre> <p>Creates an Excel containing the Marketing Mix Model optimization results</p>"},{"location":"client/#parameters_4","title":"Parameters","text":"<p>excel_name Name of the output Excel</p> <p>model_id     ID of the fitted model data_id     ID of the data to use opt_results_id     ID of the optimization results</p>"},{"location":"client/#returns_3","title":"Returns","text":"<p>plots     An Excel file</p>"},{"location":"client/#get_experiments_list","title":".get_experiments_list","text":"<pre><code>.get_experiments_list()\n</code></pre> <p>Returns the list of the user's experiments</p>"},{"location":"client/#returns_4","title":"Returns","text":"<p>experiments A list of UserExperiment objects, containing the data about all the user's experiments</p>"},{"location":"client/#get_experiment","title":".get_experiment","text":"<pre><code>.get_experiment(\n   experiment_name: str\n)\n</code></pre> <p>Returns the experiment named <code>experiment_name</code>, if it exists</p>"},{"location":"client/#parameters_5","title":"Parameters","text":"<p>experiment_name Name of the experiment to be found</p>"},{"location":"client/#returns_5","title":"Returns","text":"<p>experiment     UserExperiment object, containing the data of the experiment</p>"},{"location":"client/#create_experiment","title":".create_experiment","text":"<pre><code>.create_experiment(\n   experiment_name: str\n)\n</code></pre> <p>Creates a new experiment for the user. The experiment will contain all the data about the Marketing Mix Model data, models and optimization results.</p>"},{"location":"client/#parameters_6","title":"Parameters","text":"<p>experiment_name Name of the experiment. Must be unique among the user's experiments</p>"},{"location":"enums/","title":"Enums","text":""},{"location":"enums/#tasktype","title":"TaskType","text":"<pre><code>TaskType()\n</code></pre> <p>Fields:</p> <ul> <li>REGRESSION</li> <li>CLASSIFICATION</li> </ul>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#createexcelexception","title":"CreateExcelException","text":"<pre><code>CreateExcelException()\n</code></pre> <p>Exception raised when creating plots</p>"},{"location":"exceptions/#createexperimentexception","title":"CreateExperimentException","text":"<pre><code>CreateExperimentException()\n</code></pre> <p>Exception raised when creating an experiment</p>"},{"location":"exceptions/#createplotsexception","title":"CreatePlotsException","text":"<pre><code>CreatePlotsException()\n</code></pre> <p>Exception raised when creating plots</p>"},{"location":"exceptions/#fitexception","title":"FitException","text":"<pre><code>FitException()\n</code></pre> <p>LoadDataException</p>"},{"location":"exceptions/#getexperimentexception","title":"GetExperimentException","text":"<pre><code>GetExperimentException()\n</code></pre> <p>Exception raised when getting a user's experiment by experiment name</p>"},{"location":"exceptions/#getexperimentslistexception","title":"GetExperimentsListException","text":"<pre><code>GetExperimentsListException()\n</code></pre> <p>Exception raised when getting a user's experiments list</p>"},{"location":"exceptions/#getpresignedposturlexception","title":"GetPresignedPostURLException","text":"<pre><code>GetPresignedPostURLException()\n</code></pre> <p>Exception raised when asking for the presigned url to the web API</p>"},{"location":"exceptions/#loaddataexception","title":"LoadDataException","text":"<pre><code>LoadDataException()\n</code></pre> <p>LoadDataException</p>"},{"location":"exceptions/#malformeddatasetexception","title":"MalformedDatasetException","text":"<pre><code>MalformedDatasetException()\n</code></pre> <p>Exception raised when the dataset does not follow the correct schema</p>"},{"location":"exceptions/#optimizeexception","title":"OptimizeException","text":"<pre><code>OptimizeException()\n</code></pre> <p>LoadDataException</p>"},{"location":"exceptions/#sdkclientexception","title":"SDKClientException","text":"<pre><code>SDKClientException(\n   error_code: str = 'UNEXPECTED', error_message: str = 'Anunexpectederroroccurred'\n)\n</code></pre> <p>Base class for client sdk exceptions</p>"},{"location":"models/","title":"Models","text":""},{"location":"models/#company","title":"Company","text":"<pre><code>Company()\n</code></pre> <p>Company model</p> <p>Attributes</p> <ul> <li>company_id  : str</li> <li>name  : str</li> <li>address  : str</li> <li>vat  : str</li> </ul>"}]}